[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "fancy-dataclass"
dynamic = ["version"]
description = "Spiff up your dataclasses with extra features."
readme = "docs/README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = ["dataclass", "cli", "config", "orm", "serialize", "json", "toml"]
authors = [
  { name = "Jeremy Silver", email = "jeremys@nessiness.com" }
]
classifiers = [
  "Programming Language :: Python"
]
dependencies = [
  "sqlalchemy >= 2.0",
  "tomlkit >= 0.11",
  "typing_extensions"
]

[project.urls]
# Documentation = "https://github.com/jeremander/fancy-dataclass#readme"
Documentation = "https://fancy-dataclass.readthedocs.io"
Issues = "https://github.com/jeremander/fancy-dataclass/issues"
Source = "https://github.com/jeremander/fancy-dataclass"

[tool.hatch.build.targets.sdist]
exclude = ["TODO.txt"]

[tool.hatch.version]
path = "fancy_dataclass/__init__.py"

[tool.hatch.envs.doc]
dependencies = [
  "mkdocs",
  "mkdocs-material",
  "mkdocstrings",
  "mkdocs-gen-files",
  "mkdocstrings-python",
  "mkdocs-literate-nav",
]

[tool.hatch.envs.doc.scripts]
build = "mkdocs build --clean --strict"
serve = "mkdocs serve"
# deploy = "mkdocs gh-deploy"
deploy = "mkdocs build --site-dir $READTHEDOCS_OUTPUT/html"

[tool.hatch.envs.lint]
dependencies = [
  "mypy>=1.0",
  "numpy",
  "pytest",
  "radon",
  "ruff>=0.3",
  "vermin",
]

[tool.hatch.envs.lint.scripts]
run-ruff = "ruff check"
run-vermin = "vermin {args:-t=3.8- --eval-annotations --no-tips --violations --exclude enum.StrEnum --exclude types.UnionType .}"
run-mypy = "mypy --install-types --non-interactive {args:fancy_dataclass tests}"
run-loc-summary = "./summarize.sh"
all = ["run-ruff", "run-vermin", "run-mypy", "run-loc-summary"]

[tool.hatch.envs.test]
dependencies = [
    "numpy",
    "pytest",
    "pytest-cov",
]

[tool.hatch.envs.test.scripts]
test = "pytest {args:tests}"
test-debug = "pytest --pdb {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]

[[tool.hatch.envs.test.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.badge]
dependencies = [
  "coverage",
  "genbadge[tests,coverage]"
]

[tool.hatch.envs.badge.scripts]
badge-cov = ["coverage xml", "genbadge coverage -i coverage.xml"]
badges = ["badge-cov"]

[tool.hatch.publish.index]
disable = true

[tool.coverage.run]
source_pkgs = ["fancy_dataclass", "tests"]
branch = true
parallel = true
omit = ["venv/*"]

[tool.coverage.report]
skip_covered = true
show_missing = true
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.commitizen]
tag_format = "v$major.$minor.$patch"

[tool.mypy]
exclude = ["docs/", "site/", "tmp.*"]
warn_unused_configs = true
strict = true

[[tool.mypy.overrides]]
module = "tests.*"
strict = false
disable_error_code = ["arg-type", "attr-defined", "call-arg", "comparison-overlap", "no-redef", "no-untyped-call", "no-untyped-def", "type-arg"]

[[tool.mypy.overrides]]
module = "tests.test_cli"
disable_error_code = ["assignment"]

[[tool.mypy.overrides]]
module = "tests.test_config"
disable_error_code = ["misc", "union-attr"]

[[tool.mypy.overrides]]
module = "tests.test_inheritance"
disable_error_code = ["assignment", "misc"]

[[tool.mypy.overrides]]
module = "tests.test_mixin"
disable_error_code = ["assignment", "call-overload", "has-type", "misc", "union-attr"]

[[tool.mypy.overrides]]
module = "tests.test_serializable"
disable_error_code = ["assignment", "misc"]

[[tool.mypy.overrides]]
module = "tests.test_subprocess"
disable_error_code = ["assignment", "misc"]

[tool.pytest.ini_options]
addopts = "--verbose --cov=fancy_dataclass"
